# Archis Digital Compass: AI Collaboration Guidelines
# Version: 2.0
# Last Updated: 2025-09-28
# Maintained by: Archi Chen & AI Assistants
# Purpose: This document is the single source of truth for all content creation, design, and collaboration rules. It is designed to be machine-readable for AI assistants.

# === Project Information ===
project_info:
  name: "Archis Digital Compass"
  tagline: "透過科技與 AI，成就每一個人的成長"
  author: "Archi Chen"
  language: "zh-TW" # ISO 639-1 code for Traditional Chinese
  target_audience: "台灣科技工作者、數據分析師、程式開發者"

# === AI & Human Collaboration Protocols ===
collaboration_protocols:
  # Defines the standard operating procedure for any task.
  workflow_model:
    - "Step 1 (Goal): The user defines a high-level objective."
    - "Step 2 (Plan): The AI analyzes the request and proposes a top-down, structured plan."
    - "Step 3 (Options): For any decision point (e.g., naming, implementation details), the AI must provide clear, multiple-choice options (A, B, C...)."
    - "Step 4 (Execution): Once the user makes a choice, the AI executes the task using the appropriate tools."
    - "Step 5 (Verification): The user verifies the result of the execution before moving to the next step."

  # Governs how we communicate.
  communication:
    language_policy:
      engineering_topics: "Use English for all technical and engineering-related discussions (e.g., code structure, git, performance)."
      visual_and_content_topics: "Use Traditional Chinese (繁體中文) for discussions related to UI/UX, content, and visual design, as this is often for client review."
    interaction_style:
      - "Provide clear, multiple-choice options for decisions."
      - "Be concise and direct in all communications."
      - "Explain the purpose of any file-system-modifying command before execution."

  # Rules for interacting with the git repository.
  git_protocol:
    commit_workflow:
      - "1. Always check `git status` and `git diff` to understand the current state."
      - "2. CRITICAL: Always study the output of `git log` to understand and match the project's commit message style, tone, and format."
      - "3. Use `git add` to stage only the completed and verified changes."
      - "4. Propose a commit message based on the changes and the learned style."
      - "5. Wait for user approval of the commit message before executing `git commit`."
    push_policy: "CRITICAL: The AI assistant must NEVER use `git push`. Pushing to the remote repository is the sole responsibility of the user."

  # Defines the boundaries of the AI's capabilities and restrictions.
  scope_of_work:
    allowed_actions:
      - "Read, write, and modify files within the project directory."
      - "Run shell commands for analysis, testing, and execution."
      - "Search the web for information."
      - "Analyze and refactor code according to project guidelines."
    restricted_actions:
      - "Do not modify files or settings listed in the `protected_areas` section of this document."
      - "Do not push to the remote git repository."
      - "Do not run commands that require interactive input."

# === Content Creation Rules ===
content_rules:
  # Language and tone of voice.
  language_and_tone:
    primary: "繁體中文"
    technical_terms: "Keep in English (e.g., Backend, API, DataFrame, GitHub)."
    tone: "Professional yet approachable. Use humor and emojis sparingly for personality."
    examples:
      - "今天來聊聊 Backend 開發的眉眉角角 🤔"
      - "Data Science 不只是跑模型這麼簡單！"

  # Rules for all blog posts.
  post_requirements:
    min_length: "800 words"
    elements:
      - "Must include practical code samples or case studies."
      - "Must provide actionable solutions or steps."
      - "Should include personal insights or experiences."
    filename_format: "YYYY-MM-DD-english-title-for-post.md"

  # The required structure for a post's content.
  post_content_structure:
    - "1. Introduction (100-200 words): State the problem or topic."
    - "2. <!--more-->: The 'read more' separator."
    - "3. Main Content: Use H2/H3 headings to structure."
    - "4. Code Samples: If applicable, with explanations."
    - "5. Key Takeaways: A summary or bulleted list."
    - "6. Next Steps: Encourage reader action or further reading."

  # Front matter requirements for posts.
  post_front_matter:
    title: "string (Required, engaging title in Traditional Chinese)"
    date: "YYYY-MM-DD HH:MM:SS +0800 (Required)"
    categories: "array (Max 3, from the list of defined categories)"
    tags: "array (Max 6, relevant keywords)"
    excerpt: "string (Max 150 characters, concise summary for SEO)"
    header: "object (Optional, for custom header images/colors)"
    toc: "boolean (Optional, default: false)"
    toc_sticky: "boolean (Optional, default: false)"

# === Design System ===
design_system:
  # Overall aesthetic direction.
  aesthetics:
    style: "Minimalist Luxury"
    mood: "Modern, elegant, professional yet warm."
    inspiration: "Nordic Design × Japanese Simplicity × Modern Fashion"

  # Official color palette.
  colors:
    primary: "#1a1a1a"
    secondary: "#f8f8f8"
    accent: "#d4af37"
    rose_gold: "#e8b4b8"
    sage_green: "#9caf88"
    lavender: "#b19cd9"
    charcoal: "#2d2d2d"
    cream: "#faf7f2"
    coral: "#ff6b6b"

  # Image specifications.
  images:
    header_ratio: "16:9 (e.g., 1200x675px)"
    teaser_ratio: "4:5 (e.g., 400x500px) # Modern, magazine style"
    thumbnail_ratio: "1:1 (e.g., 500x500px) # Square, Instagram style"
    max_size: "200KB"
    formats: ["jpg", "png", "webp"]
    alt_text_required: true

  # Typography rules.
  typography:
    primary_font: "Montserrat"
    chinese_font: "Noto Sans TC"
    accent_font: "Playfair Display"
    code_font: "JetBrains Mono"

# === Site Structure & SEO ===
site_structure:
  # Content categories and their specific colors.
  categories:
    technical: { name: "技術分享", color: "#2c3e50" }
    backend: { name: "Backend 開發", color: "#34495e" }
    data-engineer: { name: "資料工程", color: "#16a085" }
    data-science: { name: "資料科學", color: "#3498db" }
    ai-applications: { name: "AI 應用", color: "#9b59b6" }
    fintech: { name: "金融科技", color: "#e74c3c" }
    quantitative-trading: { name: "量化交易", color: "#e74c3c" }
    digital-marketing: { name: "數位行銷", color: "#f39c12" }
    personal-growth: { name: "個人成長", color: "#1abc9c" }

  # SEO rules and formats.
  seo:
    title_format: "{Post Title} | Archis Digital Compass"
    meta_description_length: "150 characters"
    internal_links: "Use appropriate internal links in posts."
    structured_data: "Handled automatically by jekyll-seo-tag plugin."

  # Location of key project directories for consistent reference.
  file_paths:
    posts: "_posts/"              # Blog articles
    pages: "_pages/"              # Static pages (About, Blog, etc.)
    includes: "_includes/"        # Reusable HTML components
    layouts: "_layouts/"          # Page templates
    data: "_data/"                # Site data files (e.g., navigation)
    assets: "assets/"             # All static assets
    images: "assets/images/"      # Image assets
    css: "assets/css/"            # Compiled and source CSS/SCSS
    js: "assets/js/"              # JavaScript files
    scripts: "scripts/"           # Automation and utility scripts

# === Protected Areas (DO NOT MODIFY) ===
# These settings are managed by the site administrator.
protected_areas:
  analytics: 
    google_analytics: "GA_TRACKING_ID"
    google_adsense: "ADSENSE_CLIENT_ID"
  integrations:
    disqus_shortname: "SITE_SHORTNAME"
  technical_settings:
    permalink: "/:categories/:title/"
    timezone: "Asia/Taipei"
    encoding: "utf-8"

# === Project-Specific Knowledge Base ===
# A log of key findings and best practices discovered during development.
# This helps all collaborators (human or AI) avoid repeating past mistakes.
project_knowledge_base:
  - lesson: "The project uses a Jekyll remote_theme, not a locally installed gem."
    finding: "The theme is specified in _config.yml as `remote_theme: mmistakes/minimal-mistakes`. The `Gemfile` does not explicitly list the theme gem. Commands like `bundle show` will not work to find theme files."
    best_practice: "To customize a theme file (e.g., a layout or include), fetch the original file\'s content from the theme\'s GitHub repository and create a local copy in the corresponding project directory (e.g., `_layouts/`)."